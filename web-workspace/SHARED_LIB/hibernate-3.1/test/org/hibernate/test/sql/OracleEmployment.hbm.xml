<?xml version="1.0"?>
<!DOCTYPE hibernate-mapping PUBLIC 
	"-//Hibernate/Hibernate Mapping DTD 3.0//EN"
	"http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">

<!-- 

  This mapping demonstrates the use of Hibernate with
  all-handwritten SQL!
  
  This version is for Oracle
     
-->

<hibernate-mapping 
	package="org.hibernate.test.sql"
	default-access="field">

	<class name="Organization">
		<id name="id" unsaved-value="0" column="orgid">
			<generator class="increment"/>
		</id>
		<property name="name" not-null="true"/>
		<set lazy="true" name="employments" 
			inverse="true"
			order-by="DUMMY">
			<key column="employer"/> <!-- only needed for DDL generation -->
			<one-to-many class="Employment"/>
			<loader query-ref="organizationEmployments"/>
		</set>
		<!-- query-list name="currentEmployments" 
			query-ref="organizationCurrentEmployments"/-->
		<loader query-ref="organization"/>
		<sql-insert>INSERT INTO ORGANIZATION (NAME, ORGID) VALUES ( UPPER(?), ? )</sql-insert>
		<sql-update>UPDATE ORGANIZATION SET NAME=UPPER(?) WHERE ORGID=?</sql-update>
		<sql-delete>DELETE FROM ORGANIZATION WHERE ORGID=?</sql-delete>
	</class>
	
	<class name="Person">
		<id name="id" unsaved-value="0" column="perid">
			<generator class="increment"/>
		</id>
		<property name="name" not-null="true"/>
		<loader query-ref="person"/>
		<sql-insert>INSERT INTO PERSON (NAME, PERID) VALUES ( UPPER(?), ? )</sql-insert>
		<sql-update>UPDATE PERSON SET NAME=UPPER(?) WHERE PERID=?</sql-update>
		<sql-delete>DELETE FROM PERSON WHERE PERID=?</sql-delete>
	</class>
	
	<class name="Employment">
		<id name="employmentId" unsaved-value="0" column="empid">
			<generator class="increment"/>
		</id>
		<many-to-one name="employee" not-null="true" update="false"/>
		<many-to-one name="employer" not-null="true" update="false"/>
		<property name="startDate" not-null="true" update="false" insert="false"/>
		<property name="endDate" insert="false"/>
		<property name="regionCode" update="false"/>
	  <property name="salary" type="org.hibernate.test.sql.MonetaryAmountUserType"> 
			<column name="VALUE" sql-type="float"/>
			<column name="CURRENCY"/>			
		</property>
		<loader query-ref="employment"/>
   		<sql-insert>
			INSERT INTO EMPLOYMENT 
				(EMPLOYEE, EMPLOYER, STARTDATE, REGIONCODE, VALUE, CURRENCY, EMPID) 
				VALUES (?, ?, CURRENT_DATE, UPPER(?), ?, ?, ?)
		</sql-insert>
		<sql-update>UPDATE EMPLOYMENT SET ENDDATE=?, VALUE=?, CURRENCY=? WHERE EMPID=?</sql-update> 
		<sql-delete>DELETE FROM EMPLOYMENT WHERE EMPID=?</sql-delete> 
	</class>

    <resultset name="org-emp-regionCode">
        <return-scalar column="regionCode" type="string"/>
        <return alias="org" class="Organization"/>
        <return-join alias="emp" property="org.employments"/>
    </resultset>

    <resultset name="org-emp-person">
        <return alias="org" class="Organization"/>
        <return-join alias="emp" property="org.employments"/>
        <return-join alias="pers" property="emp.employee"/>
    </resultset>

    <resultset name="org-description">
        <return alias="org" class="Organization"/>
        <return-join alias="emp" property="org.employments"/>
    </resultset>

	<sql-query name="person">
		<return alias="p" class="Person" lock-mode="upgrade"/>
		SELECT NAME AS {p.name}, PERID AS {p.id} FROM PERSON WHERE PERID=? /*FOR UPDATE*/
	</sql-query>

	<sql-query name="organization" resultset-ref="org-description">
		<!-- return alias="org" class="Organization"/>
		<return-join alias="emp" property="org.employments"/ -->
		SELECT {org.*}, {emp.*}
		FROM ORGANIZATION org
			LEFT OUTER JOIN EMPLOYMENT emp ON org.ORGID = emp.EMPLOYER
		WHERE org.ORGID=?
	</sql-query>

	<sql-query name="organizationreturnproperty">
		<return alias="org" class="Organization">
 		 <return-property name="id" column="orgid"/>
  		 <return-property name="name" column="name"/>
		</return>
		<return-join alias="emp" property="org.employments">
			<return-property name="key" column="employer"/>
			<return-property name="element" column="empid"/>			
			<return-property name="element.employee" column="EMPLOYEE"/>
			<return-property name="element.employer" column="EMPLOYER"/>			
			<return-property name="element.startDate" column="XSTARTDATE"/>
			<return-property name="element.endDate" column="ENDDATE"/>			
			<return-property name="element.regionCode" column="REGIONCODE"/>			
			<return-property name="element.employmentId" column="EMPID"/>						
			<return-property name="element.salary">
  			  <return-column name="VALUE"/>
			  <return-column name="CURRENCY"/>			
			</return-property>
		</return-join>
		SELECT org.orgid as orgid, org.name as name, emp.employer as employer, emp.empid as empid, emp.employee as employee, emp.employer as employer, emp.startDate as xstartDate, emp.endDate as endDate, emp.regionCode as regionCode, emp.VALUE as VALUE, emp.CURRENCY as CURRENCY
		FROM ORGANIZATION org
			LEFT OUTER JOIN EMPLOYMENT emp ON org.ORGID = emp.EMPLOYER
	</sql-query>

	<sql-query name="organizationautodetect">
	<!--  equal to "organizationpropertyreturn" but since no {} nor return-property are used hibernate will fallback to use the columns directly from the mapping -->
		<return alias="org" class="Organization"/>
		<return-join alias="emp" property="org.employments"/>
		SELECT org.orgid as orgid, org.name as name, emp.employer as employer, emp.empid as empid, emp.employee as employee, emp.employer as employer, emp.startDate as startDate, emp.endDate as endDate, emp.regionCode as regionCode, emp.VALUE as VALUE, emp.CURRENCY as CURRENCY
		FROM ORGANIZATION org
			LEFT OUTER JOIN EMPLOYMENT emp ON org.ORGID = emp.EMPLOYER
	</sql-query>

	<!--sql-query name="organization">
		<return alias="org" class="Organization"/>
		SELECT NAME AS {org.name}, ORGID AS {org.id} FROM ORGANIZATION
		WHERE ORGID=?
	</sql-query-->
	
	<sql-query name="allOrganizationsWithEmployees" flush-mode="never">
		<return alias="org" class="Organization"/>
		SELECT DISTINCT org.NAME AS {org.name}, org.ORGID AS {org.id} 
		FROM ORGANIZATION org
		INNER JOIN EMPLOYMENT e ON e.EMPLOYER = org.ORGID
	</sql-query>
	
	<sql-query name="orgNamesOnly">
		<return-scalar column="NAME" type="string"/>
		SELECT org.NAME FROM ORGANIZATION org
	</sql-query>
	
	<sql-query name="orgNamesAndOrgs">
		<return-scalar column="thename" type="string"/>
		<return alias="org" class="Organization"/>
		SELECT org.NAME AS thename, org.NAME AS {org.name}, org.ORGID AS {org.id} 
		FROM ORGANIZATION org
		ORDER BY thename
	</sql-query>
	
	<sql-query name="orgsAndOrgNames">
		<return alias="org" class="Organization"/>
		<return-scalar column="thename" type="string"/>
		SELECT org.NAME AS thename, org.NAME AS {org.name}, org.ORGID AS {org.id} 
		FROM ORGANIZATION org
		ORDER BY thename
	</sql-query>	

	<sql-query name="orgIdsAndOrgNames">
		<return-scalar column="orgid" type="long"/>
		<return-scalar column="thename" type="string"/>
		SELECT NAME AS thename, ORGID AS orgid
		FROM ORGANIZATION
		ORDER BY thename
	</sql-query>
	
	<sql-query name="employment">
		<return alias="emp" class="Employment"/>
		SELECT EMPLOYEE AS {emp.employee}, EMPLOYER AS {emp.employer}, 
			STARTDATE AS {emp.startDate}, ENDDATE AS {emp.endDate},
			REGIONCODE as {emp.regionCode}, EMPID AS {emp.id}
		FROM EMPLOYMENT
		WHERE EMPID = ?
	</sql-query>

	<sql-query name="AllEmploymentAsMapped">
		<return class="Employment"/>
		SELECT * FROM EMPLOYMENT
	</sql-query>

	<sql-query name="EmploymentAndPerson">
		<return class="Employment"/>
		<return class="Person"/>
		SELECT * FROM Employment, Person
	</sql-query>
		
	<sql-query name="organizationEmployments">
		<load-collection alias="empcol" role="Organization.employments"/>
		SELECT {empcol.*}
		FROM EMPLOYMENT empcol
		WHERE EMPLOYER = :id
		ORDER BY STARTDATE ASC, EMPLOYEE ASC
	</sql-query>	

	<sql-query name="organizationEmploymentsExplicitAliases">
		<load-collection alias="empcol" role="Organization.employments"/>
		SELECT empcol.employer as {empcol.key}, empcol.empid as {empcol.element}, {empcol.element.*} 
		FROM EMPLOYMENT empcol
		WHERE EMPLOYER = :id
		ORDER BY STARTDATE ASC, EMPLOYEE ASC
	</sql-query>	
	

	<sql-query name="organizationCurrentEmployments">
		<return alias="emp" class="Employment">		    
			<return-property name="salary"> 
		      <!-- as multi column properties are not supported via the
		      {}-syntax, we need to provide an explicit column list for salary via <return-property> -->
  			  <return-column name="VALUE"/>
			  <return-column name="CURRENCY"/>			
			</return-property>
			<!-- Here we are remapping endDate. Notice that we can still use {emp.endDate} in the SQL. -->
			<return-property name="endDate" column="myEndDate"/>
		</return>
		<synchronize table="EMPLOYMENT"/>
		SELECT EMPLOYEE AS {emp.employee}, EMPLOYER AS {emp.employer}, 
			STARTDATE AS {emp.startDate}, ENDDATE AS {emp.endDate},
			REGIONCODE as {emp.regionCode}, EMPID AS {emp.id}, VALUE, CURRENCY
		FROM EMPLOYMENT
		WHERE EMPLOYER = :id AND ENDDATE IS NULL
		ORDER BY STARTDATE ASC
	</sql-query>

	<sql-query name="paramhandling" callable="true">
		<return-scalar column="value" type="long" />
		<return-scalar column="value2" type="long" />
		{ ? = call testParamHandling(?,?) }
	</sql-query>

	<sql-query name="paramhandling_mixed" callable="true">
		<return-scalar column="value" type="long" />
		<return-scalar column="value2" type="long" />
		{ ? = call testParamHandling(?,:second) }
	</sql-query>

	<sql-query name="allEmployments" callable="true">
		<return alias="emp" class="Employment">
			<return-property name="employee" column="EMPLOYEE"/>
			<return-property name="employer" column="EMPLOYER"/>			
			<return-property name="startDate" column="STARTDATE"/>
			<return-property name="endDate" column="ENDDATE"/>			
			<return-property name="regionCode" column="REGIONCODE"/>			
			<return-property name="employmentId" column="EMPID"/>						
			<return-property name="salary">
  			  <return-column name="VALUE"/>
			  <return-column name="CURRENCY"/>			
			</return-property>
		</return>
	 { ? = call allEmployments() }
	</sql-query>

	<sql-query name="simpleScalar" callable="true">
	 <return-scalar column="name" type="string"/>
	 <return-scalar column="value" type="long"/>
	 { ? = call simpleScalar(:number) }
	</sql-query>
	
	<database-object>
		<create>
		CREATE OR REPLACE FUNCTION testParamHandling (j number, i number)
			RETURN SYS_REFCURSOR AS st_cursor SYS_REFCURSOR;
		BEGIN
			OPEN st_cursor FOR 
				SELECT j as value, i as value2 from dual;
			RETURN  st_cursor;
		END;
		</create>
		<drop>
		DROP FUNCTION paramHandling
		</drop>
	</database-object>
	
	<database-object>
		<create>
		CREATE OR REPLACE FUNCTION simpleScalar (j number)
			RETURN SYS_REFCURSOR AS st_cursor SYS_REFCURSOR;
		BEGIN
			OPEN st_cursor FOR
				SELECT j as value, 'getAll' as name from dual;
			RETURN  st_cursor; 
		END;
		</create>
		<drop>
		DROP FUNCTION simpleScalar
		</drop>
	</database-object>
	
	<database-object>
		<create>
		CREATE OR REPLACE FUNCTION allEmployments 
			RETURN SYS_REFCURSOR AS st_cursor SYS_REFCURSOR;
			BEGIN
				OPEN st_cursor FOR
					SELECT EMPLOYEE, EMPLOYER, STARTDATE, ENDDATE,
					REGIONCODE, EMPID, VALUE, CURRENCY
					FROM EMPLOYMENT;
				RETURN  st_cursor;
		END;
		</create>
		<drop>
		DROP FUNCTION allEmployments
		</drop>
	</database-object>
		
	
</hibernate-mapping>
